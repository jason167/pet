<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC "-//Puppy Crawl//DTD Check Configuration 1.3//EN" "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<!-- This configuration file was written by the eclipse-cs plugin configuration 
	editor -->
<!-- 	
 校验模块名					             验证范围									                                                            默认正则
AbstractClassName			abstract classes									        ^Abstract.*$|^.*Factory$
ClassTypeParameterName		class type parameters									    ^[A-Z]$
ConstantName				constants (static, final fields)							^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$
LocalFinalVariableName		local, final variables, including catch parameters			^[a-z][a-zA-Z0-9]*$
LocalVariableName			local, non-final variables, including catch parameters		^[a-z][a-zA-Z0-9]*$
MemberName					non-static fields											^[a-z][a-zA-Z0-9]*$
MethodName					methods													    ^[a-z][a-zA-Z0-9]*$
MethodTypeParameterName		method type parameters									    ^[A-Z]$
InterfaceTypeParameterName	interface type parameters									^[A-Z]$
PackageName					packages													^[a-z]+(\.[a-zA-Z_][a-zA-Z0-9_]*)*$
ParameterName				parameters													^[a-z][a-zA-Z0-9_]*$
StaticVariableName			static, non-final fields									^[a-z][a-zA-Z0-9]*$
TypeName					classes, interfaces, enums, and annotations					^[A-Z][a-zA-Z0-9]*$
-->
	
<!-- Checkstyle-Configuration: check Description: none -->
<module name="Checker">
	<property name="severity" value="error" />
	<property name="charset" value="UTF-8" />
	<message key="general.exception" value="有一个异常 - {0}" />
	<message key="general.fileNotFound" value="文件没找到!" />
	<module name="TreeWalker">
		<property name="severity" value="error" />
		<property name="tabWidth" value="4" />
		<message key="general.exception" value="有一个异常 - {0}" />
	    <!-- 命名方面的检查，它们都使用了Sun官方定的规则  -->
		<!-- 检查包名 -->
		<module name="PackageName">
			<message key="name.invalidPattern" value="包名 ''{0}'' 必须符合正则表达式 ''{1}''." />
		</module>
		<!-- 类名（class或interface）的检查 -->
		<module name="TypeName">
			<message key="name.invalidPattern" value="名称 ''{0}'' 必须符合正则表达式 ''{1}''." />
		</module>
		<!-- 方法名检查 -->
		<module name="MethodName">
			<message key="name.invalidPattern" value="名称 ''{0}''必须符合以下正则表达式 ''{1}''." />
			<message key="method.name.equals.class.name" value="名称 ''{0}'' 不能与内部类名称相同." />
		</module>
		<!-- 非static型变量检查 -->
		<module name="MemberName">
			<message key="name.invalidPattern" value="名称 ''{0}'' 必须符合正则表达式 ''{1}''." />
		</module>
		<!-- 常量名检查 -->
		<module name="ConstantName">
			<message key="name.invalidPattern" value="名称 ''{0}'' 必须符合正则表达式 ''{1}''." />
		</module>
		<!-- 检查参数名 -->
		<module name="ParameterName">
			<message key="name.invalidPattern" value="名称 ''{0}'' 必须符合正则表达式 ''{1}''." />
		</module> 
		<!-- 检查long型约束是否有大写的“L” -->
		<module name="UpperEll">
			<message key="upperEll" value="必须使用大写字母 ''L''." />
		</module>
		
		
		<!-- 长度方面的检查 -->
		<!-- 每行不超过120个字 -->
		<module name="LineLength">
			<property name="severity" value="warning" />
			<property name="max" value="120" />
			<message key="maxLineLen" value="行字符数超过 {0,number,integer} 个." />
		</module>
		<!-- 方法长度不超过100行 -->
		<module name="MethodLength">
			<property name="severity" value="warning" />
			<property name="max" value="100" />
			<property name="tokens" value="METHOD_DEF" />
			<message key="maxLen.method"
				value="方法长度 {0,number,integer} 行 (最大允许行数为 {1,number,integer})." />
		</module>
		<!-- 方法的参数个数不超过7个（默认7个） -->
		<module name="ParameterNumber">
			<property name="severity" value="warning" />
			<property name="tokens" value="METHOD_DEF" />
			<message key="maxParam" value="超过 {0,number,integer} 参数." />
		</module>
		
		
		<!-- 编码方面的检查 -->		
		<!-- 不许出现空语句 -->
		<module name="EmptyStatement">
			<message key="empty.statement" value="空代码块." />
		</module>		
		<!-- 不许内部赋值 -->
		<module name="InnerAssignment">
			<property name="severity" value="info" />
		</module>
		<!-- 不能用魔法数据 -->
		<module name="MagicNumber">
			<message key="magic.number" value="''{0}'' 是一个魔法数(即常数)." />
		</module>
		<!-- 循环控制变量不能被修改 -->
		<module name="ModifiedControlVariable" />
		<!-- 检查是否有被重复抛出的异常 -->
		<module name="RedundantThrows">
			<property name="severity" value="warning" />
			<message key="redundant.throws.classInfo" value="没办法获得类信息 {0}." />
			<message key="redundant.throws.duplicate" value="冗余的 throws: ''{0}'' 使用了多次." />
			<message key="redundant.throws.subclass" value="冗余的 throws: ''{0}'' 是 ''{1}''的子类." />
			<message key="redundant.throws.unchecked" value="冗余的 throws: ''{0}'' 是运行时的异常." />
		</module>
		<!-- String的比较不能用!= 和 == -->
		<module name="StringLiteralEquality">
			<message key="string.literal.equality" value="字符串比较必须使用 equals(), 而不是 ''{0}''." />
		</module>
		<!-- if 最多使用3层嵌套 -->
		<module name="NestedIfDepth">
			<property name="severity" value="warning" />
			<property name="max" value="3" />
			<message key="nested.if.depth"
				value="if-else嵌套语句个数为 {0,number,integer} (最大允许嵌套语句个数为: {1,number,integer})." />
		</module>
		<!-- try最多被嵌套2层 -->
		<module name="NestedTryDepth">
			<property name="severity" value="warning" />
			<property name="max" value="2" />
		</module>
		<!-- clone方法必须调用了super.clone() -->
		<module name="SuperClone">
			<message key="missing.super.call" value="方法 ''{0}'' 需要调用 ''super.{0}''." />
		</module>
		<!-- finalize 必须调用了super.finalize() -->
		<module name="SuperFinalize">
			<message key="missing.super.call" value="方法 ''{0}'' 需要调用 ''super.{0}''." />
		</module>
		<!-- 不能catch java.lang.Exception -->
		<module name="IllegalCatch">
			<property name="severity" value="warning" />
			<property name="illegalClassNames" value="java.lang.Exception" />
			<message key="illegal.catch" value="Catching ''{0}'' 是不允许的." />
		</module>
		<!-- 一个方法中最多有3个return -->
		<module name="ReturnCount">
			<property name="severity" value="warning" />
			<property name="max" value="3" />
			<property name="format" value="^$" />
			<message key="return.count"
				value="Return 个数 {0,number,integer} (最大允许个数为: {1,number,integer})." />
		</module>
		<!-- 不许对方法的参数赋值 -->
		<module name="ParameterAssignment">
			<property name="severity" value="error" />
			<message key="parameter.assignment" value="参数赋值 ''{0}'' 是不允许的." />
		</module>
		<!-- 不许有同样内容的String ，超过5次提示 info -->
		<module name="MultipleStringLiterals">
			<property name="severity" value="warning" />
			<property name="allowedDuplicates" value="5"/>
		</module>
		<!-- 同一行不能有多个声明 -->
		<module name="MultipleVariableDeclarations">
			<message key="multiple.variable.declarations.comma" value="每一个变量的定义必须在它的声明处，且在同一行." />
			<message key="multiple.variable.declarations" value="每一行只能定义一个变量." />
		</module>
		<!-- 所有区域都要使用大括号  主要是在if-else时的情况 -->
		<module name="NeedBraces">
			<message key="needBraces" value="''{0}'' 结构必须要用大括号 '''{}'''s." />
		</module>
		<!-- 检查一个可能为null的字符串是否在equals()比较的左边 -->
		<module name="EqualsAvoidNull"/>
		<!-- 检查接口和annotation中是否有重复的修饰符 -->
		<module name="RedundantModifier">
			<property name="severity" value="info" />
			<message key="redundantModifier" value="冗余 ''{0}'' 修饰符." />
		</module>		
		<!-- 检查类中是否有声明package -->
		<module name="PackageDeclaration">
			<property name="severity" value="warning" />
			<message key="missing.package.declaration" value="缺少包的定义." />
			<message key="package.dir.mismatch" value="包定义与目录名不匹配 ''{0}''." />
		</module>
		
		
		
		<!-- javadoc 注释检查 -->
		<!-- 检查方法和构造函数的javadoc -->
		<module name="JavadocMethod">		
		    <property name="scope" value="protected" />	
		</module>
		<!--public protect private变量的javadoc进行检查 -->
		<module name="JavadocVariable">
		    <property name="scope" value="protected" />		
			<message key="javadoc.missing" value="缺少Javadoc 注释." />
		</module>
		<!-- 检查类和接口的javadoc -->
		<module name="JavadocType">
			<property name="authorFormat" value="\S" />
			<message key="type.missingTag" value="注解缺少 {0} tag." />
			<message key="javadoc.missing" value="缺少注解" />
			<message key="javadoc.unusedTagGeneral" value="不使用的注解tag" />
			<message key="type.tagFormat" value="注解tag {0} 必须符合正则表达式 ''{1}''." />
		</module>
		

        <!-- 检查代码排版  -->
		<!-- 检查代码中正确的缩进 -->
		<module name="Indentation">
			<property name="severity" value="info" />
			<message key="indentation.error" value="{0} 代码缩进 {1} 不正确, {2}" />
			<message key="indentation.child.error" value="{0} 子功能代码缩进 {1} 不正确, {2}" />
		</module>
		<!-- 检查数组类型定义的样式 -->
		<module name="ArrayTypeStyle">
			<message key="array.type.style" value="数组中括号位置不对,建议如:String[] args." />
		</module>
        <!-- 检查约定方法名与左边圆括号之间不许出现空格 -->
		<module name="MethodParamPad" >
			<property name="severity" value="warning" />
		</module>
		<!-- 检查不需要的嵌套’{}’ -->
		<module name="AvoidNestedBlocks">
			<property name="allowInSwitchCase" value="true" />
			<message key="block.nested" value="避免代码块的嵌套" />
		</module>
		<!-- 检查是否有使用不需要的圆括号 -->
		<module name="UnnecessaryParentheses">
			<property name="severity" value="warning" />
			<message key="unnecessary.paren.assign" value="任务的右边含有不必要的圆括号" />
			<message key="unnecessary.paren.ident" value="标识符''{0}''含有不必要的圆括号." />
			<message key="unnecessary.paren.literal" value="''{0}''含有不必要的圆括号." />
			<message key="unnecessary.paren.return" value="return 值里含有不必要的圆括号" />
			<message key="unnecessary.paren.expr" value="表达式里含有不必要的圆括号" />
			<message key="unnecessary.paren.string" value="字符串 {0}含有不必要的圆括号." />
		</module>
		<!-- 检查修饰符的顺序是否遵照java语言规范 -->
		<module name="ModifierOrder">
			<message key="mod.order" value="''{0}'' 修饰符没有按照 JLS 的建议顺序." />
			<message key="annotation.order" value="''{0}'' 注释修饰符不能在非注释修饰符前面." />
		</module>
		<!-- 检查是否有未使用的import -->
		<module name="UnusedImports">
		    <property name="severity" value="warning" />
			<message key="import.unused" value="没被使用过 import - {0}." />
		</module>
	</module>


	<!-- 文件长度不超过1500行 -->
	<module name="FileLength">
		<property name="severity" value="warning" />
		<property name="max" value="1500" />
		<message key="maxLen.file"
			value="文件 {0,number,integer} 行 (最大行数为： {1,number,integer})." />
	</module>
    <!-- 严格检查重复代码 -->
	<module name="StrictDuplicateCode">
		<property name="min" value="20" />
		<message key="duplicates.lines" value="从第 {2}开始,有{0}行相同代码 与 {1}中重复." />
	</module>
	<!-- 检查property文件中是否有相同的key -->
	<module name="Translation">
		<message key="translation.missingKey" value="关键字 ''{0}'' 没找到." />
	</module>
</module>
